package course1.penTest;

import course1.pen.Pen;

import org.testng.Assert;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Parameters;
import org.testng.annotations.Test;

import java.io.ByteArrayOutputStream;
import java.io.PrintStream;

import java.lang.reflect.Field;


public class PenTest {

    //9.Должны присутствовать Before и After Method методы. в жтим методах выводить тест начался и закончился
    @BeforeMethod
    public void beforeTestMethods() {
        System.out.println("test started");
    }

    @AfterMethod
    public void afterTestMethods() {
        System.out.println("test finished");
    }

    //8. Создать еще один тест заглушку, который должен бы был выводить на экран "all is fine", но он не будет запускаться
    @Test(enabled = false)
    public void testPenConstructor() {
        Pen pen = new Pen(100);
        Assert.assertEquals(pen.getColor(), "BLUE", "not all is fine");
        System.out.println("ALL IS FINE");
    }



    //constructors test
    //7. У одного теста должен быть тайм аут
    @Test(timeOut = 1000)
    public void testShouldCreatePen() {
        Pen pen = new Pen(1000);
        Assert.assertNotNull(pen, pen + " is null");
    }

    @Test
    public void testPrivateFields1() {
        Pen pen = new Pen(1000, 1.1, "Red");
        String color = null;
        Double sizeLetter = 0.0;
        int inkContainerValue = 0;

        try {
            Field field0 = pen.getClass().getDeclaredField("color");
            field0.setAccessible(true);
            color = (String) field0.get(pen);

            Field field1 = pen.getClass().getDeclaredField("sizeLetter");
            field1.setAccessible(true);
            sizeLetter = (Double) field1.get(pen);

            Field field2 = pen.getClass().getDeclaredField("inkContainerValue");
            field2.setAccessible(true);
            inkContainerValue = (int) field2.get(pen);


        } catch (NoSuchFieldException | IllegalAccessException e) {
            e.printStackTrace();
        }
        Assert.assertEquals(color, "Red", "color is not 'Red'");
        Assert.assertEquals(sizeLetter, 1.1, "sizeLetter is not '1.1'");
        Assert.assertEquals(inkContainerValue, 1000, "inkContainerValue is not '1000'");
    }

    @Test
    public void testPrivateFields2() {
        Pen pen = new Pen(1000, 1.1, "");
        String color = null;
        Double sizeLetter = 0.0;
        int inkContainerValue = 0;

        try {
            Field field0 = pen.getClass().getDeclaredField("color");
            field0.setAccessible(true);
            color = (String) field0.get(pen);

            Field field1 = pen.getClass().getDeclaredField("sizeLetter");
            field1.setAccessible(true);
            sizeLetter = (Double) field1.get(pen);

            Field field2 = pen.getClass().getDeclaredField("inkContainerValue");
            field2.setAccessible(true);
            inkContainerValue = (int) field2.get(pen);


        } catch (NoSuchFieldException | IllegalAccessException e) {
            e.printStackTrace();
        }
        Assert.assertEquals(color, "", "color is not ''");
        Assert.assertEquals(sizeLetter, 1.1, "sizeLetter is not '1.1'");
        Assert.assertEquals(inkContainerValue, 1000, "inkContainerValue is not '1000'");
    }

    @Test
    public void testPrivateFields3() {
        Pen pen = new Pen(1000, 1.1, "BLUE");
        String color = null;
        Double sizeLetter = 0.0;
        int inkContainerValue = 0;

        try {
            Field field0 = pen.getClass().getDeclaredField("color");
            field0.setAccessible(true);
            color = (String) field0.get(pen);

            Field field1 = pen.getClass().getDeclaredField("sizeLetter");
            field1.setAccessible(true);
            sizeLetter = (Double) field1.get(pen);

            Field field2 = pen.getClass().getDeclaredField("inkContainerValue");
            field2.setAccessible(true);
            inkContainerValue = (int) field2.get(pen);


        } catch (NoSuchFieldException | IllegalAccessException e) {
            e.printStackTrace();
        }
        Assert.assertEquals(color, "BLUE", "color is not 'BLUE'");
        Assert.assertEquals(sizeLetter, 1.1, "sizeLetter is not '1.1'");
        Assert.assertEquals(inkContainerValue, 1000, "inkContainerValue is not '1000'");
    }

    @Test
    public void testPrivateFields4() {
        Pen pen = new Pen(1000, 0.1);
        String color = null;
        Double sizeLetter = 0.0;
        int inkContainerValue = 0;

        try {
            Field field0 = pen.getClass().getDeclaredField("color");
            field0.setAccessible(true);
            color = (String) field0.get(pen);

            Field field1 = pen.getClass().getDeclaredField("sizeLetter");
            field1.setAccessible(true);
            sizeLetter = (Double) field1.get(pen);

            Field field2 = pen.getClass().getDeclaredField("inkContainerValue");
            field2.setAccessible(true);
            inkContainerValue = (int) field2.get(pen);


        } catch (NoSuchFieldException | IllegalAccessException e) {
            e.printStackTrace();
        }
        Assert.assertEquals(color, "BLUE", "color is not 'BLUE'");
        Assert.assertEquals(sizeLetter, 0.1, "sizeLetter is not '0.1'");
        Assert.assertEquals(inkContainerValue, 1000, "inkContainerValue is not '1000'");
    }

    //по коду тест должен проходить, но по логике размер чего-то не может быть <= 0
    @Test
    public void testPrivateFields5() {
        Pen pen = new Pen(1000, 0);
        String color = null;
        Double sizeLetter = 0.0;
        int inkContainerValue = 0;

        try {
            Field field0 = pen.getClass().getDeclaredField("color");
            field0.setAccessible(true);
            color = (String) field0.get(pen);

            Field field1 = pen.getClass().getDeclaredField("sizeLetter");
            field1.setAccessible(true);
            sizeLetter = (Double) field1.get(pen);

            Field field2 = pen.getClass().getDeclaredField("inkContainerValue");
            field2.setAccessible(true);
            inkContainerValue = (int) field2.get(pen);


        } catch (NoSuchFieldException | IllegalAccessException e) {
            e.printStackTrace();
        }
        Assert.assertEquals(color, "BLUE", "color is not 'BLUE'");
        Assert.assertEquals(sizeLetter, 0.0, "sizeLetter is not '0'");
        Assert.assertEquals(inkContainerValue, 1000, "inkContainerValue is not '1000'");
    }

    //по коду тест должен проходить, но по логике размер чего-то не может быть <= 0
    @Test
    public void testPrivateFields6() {
        Pen pen = new Pen(1000, -0.1);
        String color = null;
        Double sizeLetter = 0.0;
        int inkContainerValue = 0;

        try {
            Field field0 = pen.getClass().getDeclaredField("color");
            field0.setAccessible(true);
            color = (String) field0.get(pen);

            Field field1 = pen.getClass().getDeclaredField("sizeLetter");
            field1.setAccessible(true);
            sizeLetter = (Double) field1.get(pen);

            Field field2 = pen.getClass().getDeclaredField("inkContainerValue");
            field2.setAccessible(true);
            inkContainerValue = (int) field2.get(pen);


        } catch (NoSuchFieldException | IllegalAccessException e) {
            e.printStackTrace();
        }
        Assert.assertEquals(color, "BLUE", "color is not 'BLUE'");
        Assert.assertEquals(sizeLetter, -0.1, "sizeLetter is not '-0.1'");
        Assert.assertEquals(inkContainerValue, 1000, "inkContainerValue is not '1000'");
    }

    @Test
    public void testPrivateFields7() {
        Pen pen = new Pen(1);
        String color = null;
        Double sizeLetter = 0.0;
        int inkContainerValue = 0;

        try {
            Field field0 = pen.getClass().getDeclaredField("color");
            field0.setAccessible(true);
            color = (String) field0.get(pen);

            Field field1 = pen.getClass().getDeclaredField("sizeLetter");
            field1.setAccessible(true);
            sizeLetter = (Double) field1.get(pen);

            Field field2 = pen.getClass().getDeclaredField("inkContainerValue");
            field2.setAccessible(true);
            inkContainerValue = (int) field2.get(pen);


        } catch (NoSuchFieldException | IllegalAccessException e) {
            e.printStackTrace();
        }
        Assert.assertEquals(color, "BLUE", "color is not 'BLUE'");
        Assert.assertEquals(sizeLetter, 1.0, "sizeLetter is not '1.0'");
        Assert.assertEquals(inkContainerValue, 1, "inkContainerValue is not '1'");
    }

    @Test
    public void testPrivateFields8() {
        Pen pen = new Pen(0);
        String color = null;
        Double sizeLetter = 0.0;
        int inkContainerValue = 0;

        try {
            Field field0 = pen.getClass().getDeclaredField("color");
            field0.setAccessible(true);
            color = (String) field0.get(pen);

            Field field1 = pen.getClass().getDeclaredField("sizeLetter");
            field1.setAccessible(true);
            sizeLetter = (Double) field1.get(pen);

            Field field2 = pen.getClass().getDeclaredField("inkContainerValue");
            field2.setAccessible(true);
            inkContainerValue = (int) field2.get(pen);


        } catch (NoSuchFieldException | IllegalAccessException e) {
            e.printStackTrace();
        }
        Assert.assertEquals(color, "BLUE", "color is not 'BLUE'");
        Assert.assertEquals(sizeLetter, 1.0, "sizeLetter is not '1.0'");
        Assert.assertEquals(inkContainerValue, 0, "inkContainerValue is not '0'");
    }

    //по коду тест должен проходить, но по логике кол-во чего-то не может быть <= 0
    @Test
    public void testPrivateFields9() {
        Pen pen = new Pen(-1);
        String color = null;
        Double sizeLetter = 0.0;
        int inkContainerValue = 0;

        try {
            Field field0 = pen.getClass().getDeclaredField("color");
            field0.setAccessible(true);
            color = (String) field0.get(pen);

            Field field1 = pen.getClass().getDeclaredField("sizeLetter");
            field1.setAccessible(true);
            sizeLetter = (Double) field1.get(pen);

            Field field2 = pen.getClass().getDeclaredField("inkContainerValue");
            field2.setAccessible(true);
            inkContainerValue = (int) field2.get(pen);


        } catch (NoSuchFieldException | IllegalAccessException e) {
            e.printStackTrace();
        }
        Assert.assertEquals(color, "BLUE", "color is not 'BLUE'");
        Assert.assertEquals(sizeLetter, 1.0, "sizeLetter is not '1.0'");
        Assert.assertEquals(inkContainerValue, -1, "inkContainerValue is not '-1'");
    }

//    ???? лучше удалить
//    @Test
//    public void testPereTest() {
//        Pen myClass = null;
//        try {
//            Class clazz = Class.forName(Pen.class.getName());
//
//            Constructor[] constructors = clazz.getConstructors();
//            for (Constructor constructor : constructors) {
//                Class[] paramTypes = constructor.getParameterTypes();
//                for (Class paramType : paramTypes) {
//                    System.out.print(paramType.getName());
//                }
//            }
//        } catch (ClassNotFoundException e) {
//            e.printStackTrace();
//        }
//        System.out.println(myClass);
//    }


    //6. 2 теста из набора должны иметь группу и должна быть возможность запустить эту группу через testSuiteCourse1.xml (сделал 4)
    //5.  1 тест из набора тестовых методов должен быть параметризированным (сделал 4)

    //getColour method checks (работает только при запуске через xml)
    @Test(groups = {"paramsGroup"})
    @Parameters({"someInk"})
    public void testGetColourShouldReturnBlue(int  someInk) {
        Pen pen = new Pen(someInk);
        Assert.assertEquals(pen.getColor(), "BLUE", pen.getColor() + " is not BLUE.");
    }

    @Test(groups = {"paramsGroup"})
    @Parameters({"someInk", "someSize"})
    public void testGetColourShouldReturnBlue2(int  someInk, double someSize) {
        Pen pen = new Pen(someInk, someSize);
        Assert.assertEquals(pen.getColor(), "BLUE", pen.getColor() + " is not NULL.");
    }

    //хардкод в методе
    @Test(groups = {"paramsGroup"})
    @Parameters({"someInk", "someSize", "someColor"})
    public void testGetColourShouldReturnRed(int  someInk, double someSize, String someColor) {
        Pen pen = new Pen(someInk, someSize, someColor);
        Assert.assertEquals(pen.getColor(), "Red", pen.getColor() + " is not Red.");
    }

//    //возможно стоит возвращать дефолтное значение, если пользователь оставил цвет 'пустым'
//    @Test(groups = {"paramsGroup"})
//    @Parameters({"someInk", "someSize"})
//    public void testGetColourShouldReturnBlue3(int  someInk, double someSize) {
//        Pen Course1.pen = new Pen(someInk, someSize, "");
//        Assert.assertEquals(Course1.pen.getColor(), "BLUE", Course1.pen.getColor() + " is not 'empty'.");
//    }

//    //возможно стоит возвращать дефолтное значение, если пользователь оставил цвет 'пустым'
//    @Test(groups = {"paramsGroup"})
//    @Parameters({"someInk", "someSize"})
//    public void testGetColourShouldReturnBlue4(int  someInk, double someSize) {
//        Pen Course1.pen = new Pen(someInk, someSize, null);
//        Assert.assertEquals(Course1.pen.getColor(), "BLUE", Course1.pen.getColor() + " is not 'empty'.");
//    }



    //isWork method checks

    @Test
    public void testIsWorkShouldReturnTrue1() {
        Pen pen = new Pen(1);
        Assert.assertTrue(pen.isWork(),  pen.isWork() + " is not true.");
    }

    @Test
    public void testIsWorkShouldReturnFalse() {
        Pen pen = new Pen(0);
        Assert.assertFalse(pen.isWork(),  pen.isWork() + " is not false.");
    }

    //по методу верно, но не должна ли падать ошибка на невалидный Pen?
    @Test
    public void testIsWorkShouldReturnFalse2() {
        Pen pen = new Pen(-1);
        Assert.assertFalse(pen.isWork(),  pen.isWork() + " is not false.");
    }

    @Test
    public void testIsWorkShouldReturnTrue2() {
        Pen pen = new Pen(1000, 0.1);
        Assert.assertTrue(pen.isWork(),  pen.isWork() + " is not true.");
    }

    //по методу верно, но не должна ли падать ошибка на невалидный Pen?
    @Test
    public void testIsWorkShouldReturnFalse3() {
        Pen pen = new Pen(1000, 0);
        Assert.assertTrue(pen.isWork(),  pen.isWork() + " is not true.");
    }

    //по методу верно, но не должна ли падать ошибка на невалидный Pen?
    @Test
    public void testIsWorkShouldReturnFalse4() {
        Pen pen = new Pen(1000, -0.1);
        Assert.assertTrue(pen.isWork(),  pen.isWork() + " is not true.");
    }

    @Test
    public void testIsWorkShouldReturnTrue4() {
        Pen pen = new Pen(1000, 10.1, "Red");
        Assert.assertTrue(pen.isWork(),  pen.isWork() + " is not true.");
    }



    //doSomethingElse method checks
    @Test
    public void testDoSomethingElseShouldPrintBlue() {
        Pen pen = new Pen(1000);
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        PrintStream ps = new PrintStream(baos);
        // сохраняем старый System.out
        PrintStream old = System.out;
        // говорим использовать специальный поток
        System.setOut(ps);
        // Вывести что-то в консоль (и перенаправится в новый поток)
        pen.doSomethingElse();
        // Вернуть всё обратно
        System.out.flush();
        System.setOut(old);
        // Показать что вышло
        System.out.println("Here: " + baos.toString());
        String test = baos.toString()/*.trim()*/;
        Assert.assertEquals(test, "BLUE\r\n", test + "\r\n is not BLUE.");
    }

    @Test
    public void testDoSomethingElseShouldPrintBlue2() {
        Pen pen = new Pen(1000, 1.1);
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        PrintStream ps = new PrintStream(baos);
        PrintStream old = System.out;
        System.setOut(ps);
        pen.doSomethingElse();
        System.out.flush();
        System.setOut(old);
        System.out.println("Here: " + baos.toString());
        String test = baos.toString()/*.trim()*/;
        Assert.assertEquals(test, "BLUE\r\n", test + "\r\n is not BLUE.");
    }

    @Test
    public void testDoSomethingElseShouldPrintRed() {
        Pen pen = new Pen(1000, 1.1, "Red");
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        PrintStream ps = new PrintStream(baos);
        PrintStream old = System.out;
        System.setOut(ps);
        pen.doSomethingElse();
        System.out.flush();
        System.setOut(old);
        System.out.println("Here: " + baos.toString());
        String test = baos.toString()/*.trim()*/;
        Assert.assertEquals(test, "Red\r\n", test + "\r\n is not Red.");
    }

    //возможно стоит возвращать дефолтное значение, если пользователь оставил цвет 'пустым'(нет)
    @Test
    public void testDoSomethingElseShouldPrintBlue3() {
        Pen pen = new Pen(1000, 1, null);
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        PrintStream ps = new PrintStream(baos);
        PrintStream old = System.out;
        System.setOut(ps);
        pen.doSomethingElse();
        System.out.flush();
        System.setOut(old);
        System.out.println("Here: " + baos.toString());
        String test = baos.toString()/*.trim()*/;
        Assert.assertEquals(test, null + "\r\n", test + "\r\n is not null.");
    }

    //возможно стоит возвращать дефолтное значение, если пользователь оставил цвет 'пустым'(нет)
    @Test
    public void testDoSomethingElseShouldPrintBlue4() {
        Pen pen = new Pen(1000, 1, "");
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        PrintStream ps = new PrintStream(baos);
        PrintStream old = System.out;
        System.setOut(ps);
        pen.doSomethingElse();
        System.out.flush();
        System.setOut(old);
        System.out.println("Here: " + baos.toString());
        String test = baos.toString()/*.trim()*/;
        Assert.assertEquals(test, "\r\n", test + "\r\n is not 'empty'.");
    }



    //write method checks
    @Test
    public void testWriteShouldPrintTest() {
        Pen pen = new Pen(1000);
        Assert.assertEquals(pen.write("Test"), "Test", pen.write("Test") + " is not 'Test'.");
    }

    @Test
    public void testWriteShouldPrintT() {
        Pen pen = new Pen(1);
        Assert.assertEquals(pen.write("Test"), "T", pen.write("Test") + " is not 'T'.");
    }

    //кейс не нужен?
    //Должна быть ошибка?
    @Test
    public void testWriteShouldNotPrint() {
        Pen pen = new Pen(0);
        Assert.assertEquals(pen.write("Test"), "", pen.write("Test") + " is not 'empty'.");
    }

    //Должна быть ошибка? (в конструкторе)
    @Test
    public void testWriteShouldNotPrint1() {
        Pen pen = new Pen(-1);
        Assert.assertEquals(pen.write("Test"), "", pen.write("Test") + " is not 'empty'.");
    }

    //Должна быть ошибка? (в конструкторе)
    @Test
    public void testWriteShouldNotPrint2() {
        Pen pen = new Pen(-1000);
        Assert.assertEquals(pen.write("Test"), "", pen.write("Test") + " is not 'empty'.");
    }

    @Test
    public void testWriteShouldPrintTest2() {
        Pen pen = new Pen(1000, 1.1);
        Assert.assertEquals(pen.write("Test"), "Test", pen.write("Test") + " is not 'Test'.");
    }

    @Test
    public void testWriteShouldPrintTest3() {
        Pen pen = new Pen(1000, 0.1);
        Assert.assertEquals(pen.write("Test"), "Test", pen.write("Test") + " is not 'Test'.");
    }

    @Test
    public void testWriteShouldPrintTest4() {
        Pen pen = new Pen(1000, 250);
        Assert.assertEquals(pen.write("Test"), "Test", pen.write("Test") + " is not 'T'.");
    }

    @Test
    public void testWriteShouldPrintT2() {
        Pen pen = new Pen(1000, 1000);
        Assert.assertEquals(pen.write("Test"), "T", pen.write("Test") + " is not 'T'.");
    }

    @Test
    public void testWriteShouldNotPrint3() {
        Pen pen = new Pen(1000, 0);
        Assert.assertEquals(pen.write("Test"), "", pen.write("Test") + " is not 'empty'.");
    }

    @Test
    public void testWriteShouldNotPrint4() {
        Pen pen = new Pen(1000, -0.1);
        Assert.assertEquals(pen.write("Test"), "", pen.write("Test") + " is not 'Test'.");
    }

    @Test
    public void testWriteShouldNotPrint5() {
        Pen pen = new Pen(1000, -1);
        Assert.assertEquals(pen.write("Test"), "", pen.write("Test") + " is not 'Test'.");
    }

    @Test
    public void testWriteShouldPrintSentence() {
        Pen pen = new Pen(12, 1);
        Assert.assertEquals(pen.write(" я хочу сдать TD "), "я хочу сдать TD", pen.write(" я хочу сдать TD ") + " is not 'я хочу сдать TD'.");
    }

//    УДАЛИТЬ!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
//    @Test
//    public void testShouldCreateWithColorEmpty() {
//        Pen Course1.pen = new Pen(1000, 1.1, "");
//        String color = null;
//        try {
//            Field field = Course1.pen.getClass().getDeclaredField("color");
//            field.setAccessible(true);
//            color = (String) field.get(Course1.pen);
//        } catch (NoSuchFieldException | IllegalAccessException e) {
//            e.printStackTrace();
//        }
//        Assert.assertEquals(color, "", "color is not ''");
//    }
//
//    @Test
//    public void testShouldCreateWithColorNull() {
//        Pen Course1.pen = new Pen(1000, 1.1, null);
//        String color = null;
//        try {
//            Field field = Course1.pen.getClass().getDeclaredField("color");
//            field.setAccessible(true);
//            color = (String) field.get(Course1.pen);
//        } catch (NoSuchFieldException | IllegalAccessException e) {
//            e.printStackTrace();
//        }
//        Assert.assertNull(color, "color is not 'null'");
//    }
//
//    @Test
//    public void testShouldCreateWithColorDefault() {
//        Pen Course1.pen = new Pen(1000, 1.1, "BLUE");
//        String color = null;
//        try {
//            Field field = Course1.pen.getClass().getDeclaredField("color");
//            field.setAccessible(true);
//            color = (String) field.get(Course1.pen);
//        } catch (NoSuchFieldException | IllegalAccessException e) {
//            e.printStackTrace();
//        }
//        Assert.assertEquals(color, "BLUE", "color is not 'BLUE'");
//    }
//
//    @Test
//    public void testShouldCreateWithoutColorDefault2() {
//        Pen Course1.pen = new Pen(1000, 1.1);
//        String color = null;
//        try {
//            Field field = Course1.pen.getClass().getDeclaredField("color");
//            field.setAccessible(true);
//            color = (String) field.get(Course1.pen);
//        } catch (NoSuchFieldException | IllegalAccessException e) {
//            e.printStackTrace();
//        }
//        Assert.assertEquals(color, "BLUE", "color is not 'BLUE'");
//    }
//
//    @Test
//    public void testShouldCreateWithSize() {
//        Pen Course1.pen = new Pen(1000, 0.1);
//        Double sizeLetter = null;
//        try {
//            Field field = Course1.pen.getClass().getDeclaredField("sizeLetter");
//            field.setAccessible(true);
//            sizeLetter = (Double) field.get(Course1.pen);
//        } catch (NoSuchFieldException | IllegalAccessException e) {
//            e.printStackTrace();
//        }
//        Assert.assertEquals(sizeLetter, 0.1, "sizeLetter is not '0.1'");
//    }
//
//    //по коду тест должен проходить, но по логике размер или кол-во чего-то не может быть <= 0
//    @Test
//    public void testShouldNotCreateWithSize0() {
//        Pen Course1.pen = new Pen(1000, 0);
//        Double sizeLetter = null;
//        try {
//            Field field = Course1.pen.getClass().getDeclaredField("sizeLetter");
//            field.setAccessible(true);
//            sizeLetter = (Double) field.get(Course1.pen);
//        } catch (NoSuchFieldException | IllegalAccessException e) {
//            e.printStackTrace();
//        }
//        Assert.assertEquals(sizeLetter, 0.0, "sizeLetter is not '0'");
//    }
//
//    //по коду тест должен проходить, но по логике размер или кол-во чего-то не может быть <= 0
//    @Test
//    public void testShouldNotCreateWithSize() {
//        Pen Course1.pen = new Pen(1000, -0.1);
//        Double sizeLetter = null;
//        try {
//            Field field = Course1.pen.getClass().getDeclaredField("sizeLetter");
//            field.setAccessible(true);
//            sizeLetter = (Double) field.get(Course1.pen);
//        } catch (NoSuchFieldException | IllegalAccessException e) {
//            e.printStackTrace();
//        }
//        Assert.assertEquals(sizeLetter, -0.1, "sizeLetter is not '-0.1'");
//    }
//
//    @Test
//    public void testShouldCreateWithInk() {
//        Pen Course1.pen = new Pen(1);
//        int  inkContainerValue = 0;
//        try {
//            Field field = Course1.pen.getClass().getDeclaredField("inkContainerValue");
//            field.setAccessible(true);
//            inkContainerValue = (int) field.get(Course1.pen);
//        } catch (NoSuchFieldException | IllegalAccessException e) {
//            e.printStackTrace();
//        }
//
//        Assert.assertEquals(inkContainerValue, 1, "inkContainerValue is not '1'");
//    }
//
//
//    //по коду тест должен проходить, но по логике размер или кол-во чего-то не может быть <= 0
//    @Test
//    public void testShouldNotCreateWithInk0() {
//        Pen Course1.pen = new Pen(0);
//        int  inkContainerValue = 0;
//        try {
//            Field field = Course1.pen.getClass().getDeclaredField("inkContainerValue");
//            field.setAccessible(true);
//            inkContainerValue = (int) field.get(Course1.pen);
//        } catch (NoSuchFieldException | IllegalAccessException e) {
//            e.printStackTrace();
//        }
//
//        Assert.assertEquals(inkContainerValue, 0, "inkContainerValue is not '0'");
//    }
//
//    //по коду тест должен проходить, но по логике размер или кол-во чего-то не может быть <= 0
//    @Test
//    public void testShouldNotCreateWithInk() {
//        Pen Course1.pen = new Pen(-1);
//        int  inkContainerValue = 0;
//        try {
//            Field field = Course1.pen.getClass().getDeclaredField("inkContainerValue");
//            field.setAccessible(true);
//            inkContainerValue = (int) field.get(Course1.pen);
//        } catch (NoSuchFieldException | IllegalAccessException e) {
//            e.printStackTrace();
//        }
//
//        Assert.assertEquals(inkContainerValue, -1, "inkContainerValue is not '1'");
//    }



//    @Test
//    public void testShouldCreatePen2() {
//        Pen Course1.pen = new Pen(1);
//        Assert.assertNotNull(Course1.pen, Course1.pen + " is null");
//    }
//
//    @Test
//    public void testShouldCreatePen3() {
//        Pen Course1.pen = new Pen(0);
//        Assert.assertNotNull(Course1.pen, Course1.pen + " is null");
//    }
//
//    @Test //физически кол-во чернил не может быть меньше 0
//    public void testShouldNotCreatePen() {
//        Pen Course1.pen = new Pen(-1);
//        Assert.assertNull(Course1.pen, Course1.pen + " is null");
//    }
//
//    @Test
//    public void testShouldNotCreatePen2() {
//        Pen Course1.pen = new Pen(-1000);
//        Assert.assertNull(Course1.pen, Course1.pen + " is null");
//    }
//
//    @Test
//    public void testShouldCreatePen4() {
//        Pen Course1.pen = new Pen(1000, 100.100);
//        Assert.assertNotNull(Course1.pen, Course1.pen + " is null");
//    }
//
//    @Test
//    public void testShouldCreatePen5() {
//        Pen Course1.pen = new Pen(1000, 0.001);
//        Assert.assertNotNull(Course1.pen, Course1.pen + " is null");
//    }
//
//    @Test //если шрифт <= 0 то что будет писать?
//    public void testShouldNotCreatePen3() {
//        Pen Course1.pen = new Pen(1000, 0);
//        Assert.assertNull(Course1.pen, Course1.pen + " is null");
//    }
//
//    @Test
//    public void testShouldNotCreatePen4() {
//        Pen Course1.pen = new Pen(1000, -0.0001);
//        Assert.assertNull(Course1.pen, Course1.pen + " is null");
//    }
//
//    @Test
//    public void testShouldNotCreatePen5() {
//        Pen Course1.pen = new Pen(1000, -1000.0001);
//        Assert.assertNull(Course1.pen, Course1.pen + " is null");
//    }
//
//    @Test
//    public void testShouldCreatePen6() {
//        Pen Course1.pen = new Pen(1000, 1.1, "Black");
//        Assert.assertNotNull(Course1.pen, Course1.pen + " is null");
//    }
//
//    @Test //должно приравниваться к дефолтному значению или не должен создавать Course1.pen?
//    public void testShouldCreatePen7() {
//        Pen Course1.pen = new Pen(1000, 1.1, "");
//        Assert.assertNotNull(Course1.pen, Course1.pen + " is null");
//    }
//
//    @Test //должно приравниваться к дефолтному значению или не должен создавать Course1.pen?
//    public void testShouldCreatePen8() {
//        Pen Course1.pen = new Pen(1000, 1.1, null);
//        Assert.assertNotNull(Course1.pen, Course1.pen + " is null");
//    }

}